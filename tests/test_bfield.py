# third-party
import matplotlib.pyplot as plt
from astropy import units as u

# local
from mCV.bfield import MagneticDipole, PureMultipole, MultipoleFieldLines
from mCV.bfield import PhysicalMultipole
# from mCV.bfield import _legendre_zeros, _legendre_zero_intervals

from scipy.special import lpmv
from scipy.optimize import brentq
import numpy as np


from recipes.testing import expected

π = np.pi


def test_dipole():
    return MagneticDipole(theta=30, phi=30).plot3d(rmin=0.1, alpha=1)


def test_pure_multipole(degree):
    PureMultipole(0, degree)


class TestMultipoleFieldLine:
    def test_get_zeros(self):
        l = 5
        MultipoleFieldLines(l)


# plt.show()
def test_legendre_zeros():

    res = 100

    fig, ax = plt.subplots()

    for l in range(8, 12):
        x = np.linspace(0, 1, res)
        line, = ax.plot(x, lpmv(1, l, x), ':',)  # color=line.get_color()
        thc = _legendre_zeros(l)
        print(f'l = {l}\nzeros = {thc}\n')
        ax.plot(thc, np.zeros_like(thc), 'x',  color=line.get_color())


def test_legendre_zero_angles():
    res = 100

    fig, ax = plt.subplots()

    for l in range(2, 8):
        θ = np.linspace(π / 2, 0, res)
        sinθ, cosθ = np.cos(θ), np.sin(θ)
        #pl0 = lpmv(0, l, cosθ)
        pl1 = lpmv(1, l, cosθ)
        sl = np.sin(θ) * pl1
        line, = ax.plot(θ, sl, ':',)  # color=line.get_color()
        thc = π / 2 - np.arccos(_legendre_zeros(l))

        print(f'l = {l}\nzeros = {thc}\n')
        ax.plot(thc, np.zeros_like(thc), 'x',  color=line.get_color())

    ax.grid()
    ax.legend()
    fig


@expected({
    (1, (0, π - 0.1)):
        np.array([[0.0,        3.04159265]]),
    (1, (0, π)):
        np.array([[0.0,        3.14159265]]),
    (1, (0, π + 0.1)):
        np.array([[0.0,        3.14159265],
                  [3.14159265, 3.24159265]]),
    (1, (0, 2 * π - 0.1)):
        np.array([[0.0,        3.14159265],
                  [3.14159265, 6.18318531]]),
    (1, (0, 2 * π)):
        np.array([[0.0,        3.14159265],
                  [3.14159265, 6.28318531]]),
    (1, (0, 2 * π + 0.1)):
        np.array([[0.0,        3.14159265],
                  [3.14159265, 6.28318531],
                  [6.28318531, 6.38318531]]),

    (2, (0, π - 0.1)):
        np.array([[0.0,        1.57079633],
                  [1.57079633, 3.04159265]]),
    (2, (0, π)):
        np.array([[0.0,        1.57079633],
                  [1.57079633, 3.14159265]]),
    (2, (0, π + 0.1)):
        np.array([[0.0,        1.57079633],
                  [1.57079633, 3.14159265],
                  [3.14159265, 3.24159265]]),
    (2, (0, 2 * π - 0.1)):
        np.array([[0.0,        1.57079633],
                  [1.57079633, 3.14159265],
                  [3.14159265, 4.71238898],
                  [4.71238898, 6.18318531]]),
    (2, (0, 2 * π)):
        np.array([[0.0,        1.57079633],
                  [1.57079633, 3.14159265],
                  [3.14159265, 4.71238898],
                  [4.71238898, 6.28318531]]),
    (2, (0, 2 * π + 0.1)):
        np.array([[0.0,        1.57079633],
                  [1.57079633, 3.14159265],
                  [3.14159265, 4.71238898],
                  [4.71238898, 6.28318531],
                  [6.28318531, 6.38318531]]),

    (3, (0, π - 0.1)):
        np.array([[0.0,        1.10714872],
                  [1.10714872, 2.03444394],
                  [2.03444394, 3.04159265]]),
    (3, (0, π)):
        np.array([[0.0,        1.10714872],
                  [1.10714872, 2.03444394],
                  [2.03444394, 3.14159265]]),
    (3, (0, π + 0.1)):
        np.array([[0.0,        1.10714872],
                  [1.10714872, 2.03444394],
                  [2.03444394, 3.14159265],
                  [3.14159265, 3.24159265]]),
    (3, (0, 2 * π - 0.1)):
        np.array([[0.0,        1.10714872],
                  [1.10714872, 2.03444394],
                  [2.03444394, 3.14159265],
                  [3.14159265, 4.24874137],
                  [4.24874137, 5.17603659],
                  [5.17603659, 6.18318531]]),
    (3, (0, 2 * π)):
        np.array([[0.0,        1.10714872],
                  [1.10714872, 2.03444394],
                  [2.03444394, 3.14159265],
                  [3.14159265, 4.24874137],
                  [4.24874137, 5.17603659],
                  [5.17603659, 6.28318531]]),
    (3, (0, 2 * π + 0.1)):
        np.array([[0.0,        1.10714872],
                  [1.10714872, 2.03444394],
                  [2.03444394, 3.14159265],
                  [3.14159265, 4.24874137],
                  [4.24874137, 5.17603659],
                  [5.17603659, 6.28318531],
                  [6.28318531, 6.38318531]]),

    (4, (0, π - 0.1)):
        np.array([[0.0,        0.85707195],
                  [0.85707195, 1.57079633],
                  [1.57079633, 2.28452071],
                  [2.28452071, 3.04159265]]),
    (4, (0, π)):
        np.array([[0.0,        0.85707195],
                  [0.85707195, 1.57079633],
                  [1.57079633, 2.28452071],
                  [2.28452071, 3.14159265]]),
    (4, (0, π + 0.1)):
        np.array([[0.0,        0.85707195],
                  [0.85707195, 1.57079633],
                  [1.57079633, 2.28452071],
                  [2.28452071, 3.14159265],
                  [3.14159265, 3.24159265]]),
    (4, (0, 2 * π - 0.1)):
        np.array([[0.0,        0.85707195],
                  [0.85707195, 1.57079633],
                  [1.57079633, 2.28452071],
                  [2.28452071, 3.14159265],
                  [3.14159265, 3.9986646],
                  [3.9986646,  4.71238898],
                  [4.71238898, 5.42611336],
                  [5.42611336, 6.18318531]]),
    (4, (0, 2 * π)):
        np.array([[0.0,        0.85707195],
                  [0.85707195, 1.57079633],
                  [1.57079633, 2.28452071],
                  [2.28452071, 3.14159265],
                  [3.14159265, 3.9986646],
                  [3.9986646,  4.71238898],
                  [4.71238898, 5.42611336],
                  [5.42611336, 6.28318531]]),
    (4, (0, 2 * π + 0.1)):
        np.array([[0.0,        0.85707195],
                  [0.85707195, 1.57079633],
                  [1.57079633, 2.28452071],
                  [2.28452071, 3.14159265],
                  [3.14159265, 3.9986646],
                  [3.9986646,  4.71238898],
                  [4.71238898, 5.42611336],
                  [5.42611336, 6.28318531],
                  [6.28318531, 6.38318531]]),

    (5, (0, π - 0.1)):
        np.array([[0.0,        0.69966909],
                  [0.69966909, 1.28154836],
                  [1.28154836, 1.8600443],
                  [1.8600443,  2.44192356],
                  [2.44192356, 3.04159265]]),
    (5, (0, π)):
        np.array([[0.0,        0.69966909],
                  [0.69966909, 1.28154836],
                  [1.28154836, 1.8600443],
                  [1.8600443,  2.44192356],
                  [2.44192356, 3.14159265]]),
    (5, (0, π + 0.1)):
        np.array([[0.0,        0.69966909],
                  [0.69966909, 1.28154836],
                  [1.28154836, 1.8600443],
                  [1.8600443,  2.44192356],
                  [2.44192356, 3.14159265],
                  [3.14159265, 3.24159265]]),
    (5, (0, 2 * π - 0.1)):
        np.array([[0.0,        0.69966909],
                  [0.69966909, 1.28154836],
                  [1.28154836, 1.8600443],
                  [1.8600443,  2.44192356],
                  [2.44192356, 3.14159265],
                  [3.14159265, 3.84126174],
                  [3.84126174, 4.42314101],
                  [4.42314101, 5.00163695],
                  [5.00163695, 5.58351622],
                  [5.58351622, 6.18318531]]),
    (5, (0, 2 * π)):
        np.array([[0.0,        0.69966909],
                  [0.69966909, 1.28154836],
                  [1.28154836, 1.8600443],
                  [1.8600443,  2.44192356],
                  [2.44192356, 3.14159265],
                  [3.14159265, 3.84126174],
                  [3.84126174, 4.42314101],
                  [4.42314101, 5.00163695],
                  [5.00163695, 5.58351622],
                  [5.58351622, 6.28318531]]),
    (5, (0, 2 * π + 0.1)):
        np.array([[0.0,        0.69966909],
                  [0.69966909, 1.28154836],
                  [1.28154836, 1.8600443],
                  [1.8600443,  2.44192356],
                  [2.44192356, 3.14159265],
                  [3.14159265, 3.84126174],
                  [3.84126174, 4.42314101],
                  [4.42314101, 5.00163695],
                  [5.00163695, 5.58351622],
                  [5.58351622, 6.28318531],
                  [6.28318531, 6.38318531]]),

    (6, (0, π - 0.1)):
        np.array([[0.0,        0.5912871],
                  [0.5912871,  1.08280933],
                  [1.08280933, 1.57079633],
                  [1.57079633, 2.05878332],
                  [2.05878332, 2.55030555],
                  [2.55030555, 3.04159265]]),
    (6, (0, π)):
        np.array([[0.0,        0.5912871],
                  [0.5912871,  1.08280933],
                  [1.08280933, 1.57079633],
                  [1.57079633, 2.05878332],
                  [2.05878332, 2.55030555],
                  [2.55030555, 3.14159265]]),
    (6, (0, π + 0.1)):
        np.array([[0.0,        0.5912871],
                  [0.5912871,  1.08280933],
                  [1.08280933, 1.57079633],
                  [1.57079633, 2.05878332],
                  [2.05878332, 2.55030555],
                  [2.55030555, 3.14159265],
                  [3.14159265, 3.24159265]]),

    (7, (0, π - 0.1)):
        np.array([[0.0,        0.5120536],
                  [0.5120536,  0.93763012],
                  [0.93763012, 1.35993808],
                  [1.35993808, 1.78165458],
                  [1.78165458, 2.20396253],
                  [2.20396253, 2.62953906],
                  [2.62953906, 3.04159265]]),
    (7, (0, π)):
        np.array([[0.0,        0.5120536],
                  [0.5120536,  0.93763012],
                  [0.93763012, 1.35993808],
                  [1.35993808, 1.78165458],
                  [1.78165458, 2.20396253],
                  [2.20396253, 2.62953906],
                  [2.62953906, 3.14159265]]),
    (7, (0, π + 0.1)):
        np.array([[0.0,        0.5120536],
                  [0.5120536,  0.93763012],
                  [0.93763012, 1.35993808],
                  [1.35993808, 1.78165458],
                  [1.78165458, 2.20396253],
                  [2.20396253, 2.62953906],
                  [2.62953906, 3.14159265],
                  [3.14159265, 3.24159265]]),

})
def test_split_interval(l, interval, expected):
    assert np.allclose(MultipoleFieldLines(l).split_interval_by_loop(interval)[1],
                       expected)
