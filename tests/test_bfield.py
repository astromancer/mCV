# third-party
import pytest
import numpy as np
import matplotlib.pyplot as plt
from scipy.special import lpmv

# local
from recipes.testing import expected
from mCV.bfield import (IdealMultipole, MagneticDipole, MultipoleFieldLines,
                        PhysicalMultipole, PhysicalMultipoleFieldLines,
                        _alf1_zeros)


π = np.pi


def test_dipole():
    return MagneticDipole(theta=30, phi=30).plot3d(rmin=0.1, alpha=1)


def test_ideal_multipole(degree):
    IdealMultipole(0, degree)


class TestMultipoleFieldLine:
    def test_get_zeros(self):
        l = 5
        MultipoleFieldLines(l)


# plt.show()
def test_alf1_zeros():

    res = 100

    fig, ax = plt.subplots()

    for l in range(8, 12):
        x = np.linspace(0, 1, res)
        line, = ax.plot(x, lpmv(1, l, x), ':',)  # color=line.get_color()
        thc = _alf1_zeros(l)
        print(f'l = {l}\nzeros = {thc}\n')
        ax.plot(thc, np.zeros_like(thc), 'x',  color=line.get_color())


def test_legendre_zero_angles():
    res = 100

    fig, ax = plt.subplots()

    for l in range(2, 8):
        θ = np.linspace(π / 2, 0, res)
        sinθ, cosθ = np.cos(θ), np.sin(θ)
        #pl0 = lpmv(0, l, cosθ)
        pl1 = lpmv(1, l, cosθ)
        sl = np.sin(θ) * pl1
        line, = ax.plot(θ, sl, ':',)  # color=line.get_color()
        thc = π / 2 - np.arccos(_alf1_zeros(l))

        print(f'l = {l}\nzeros = {thc}\n')
        ax.plot(thc, np.zeros_like(thc), 'x',  color=line.get_color())

    ax.grid()
    ax.legend()
    fig


# class TestMultipoleFieldLines:
@expected({
    (MultipoleFieldLines, 1, (0, π - 0.1)):
        np.array([[0.0,        3.04159265]]),
    (MultipoleFieldLines, 1, (0, π)):
        np.array([[0.0,        3.14159265]]),
    (MultipoleFieldLines, 1, (0, π + 0.1)):
        np.array([[0.0,        3.14159265],
                  [3.14159265, 3.24159265]]),
    (MultipoleFieldLines, 1, (0, 2 * π - 0.1)):
        np.array([[0.0,        3.14159265],
                  [3.14159265, 6.18318531]]),
    (MultipoleFieldLines, 1, (0, 2 * π)):
        np.array([[0.0,        3.14159265],
                  [3.14159265, 6.28318531]]),
    (MultipoleFieldLines, 1, (0, 2 * π + 0.1)):
        np.array([[0.0,        3.14159265],
                  [3.14159265, 6.28318531],
                  [6.28318531, 6.38318531]]),

    (MultipoleFieldLines, 2, (0, π - 0.1)):
        np.array([[0.0,        1.57079633],
                  [1.57079633, 3.04159265]]),
    (MultipoleFieldLines, 2, (0, π)):
        np.array([[0.0,        1.57079633],
                  [1.57079633, 3.14159265]]),
    (MultipoleFieldLines, 2, (0, π + 0.1)):
        np.array([[0.0,        1.57079633],
                  [1.57079633, 3.14159265],
                  [3.14159265, 3.24159265]]),
    (MultipoleFieldLines, 2, (0, 2 * π - 0.1)):
        np.array([[0.0,        1.57079633],
                  [1.57079633, 3.14159265],
                  [3.14159265, 4.71238898],
                  [4.71238898, 6.18318531]]),
    (MultipoleFieldLines, 2, (0, 2 * π)):
        np.array([[0.0,        1.57079633],
                  [1.57079633, 3.14159265],
                  [3.14159265, 4.71238898],
                  [4.71238898, 6.28318531]]),
    (MultipoleFieldLines, 2, (0, 2 * π + 0.1)):
        np.array([[0.0,        1.57079633],
                  [1.57079633, 3.14159265],
                  [3.14159265, 4.71238898],
                  [4.71238898, 6.28318531],
                  [6.28318531, 6.38318531]]),

    (MultipoleFieldLines, 3, (0, π - 0.1)):
        np.array([[0.0,        1.10714872],
                  [1.10714872, 2.03444394],
                  [2.03444394, 3.04159265]]),
    (MultipoleFieldLines, 3, (0, π)):
        np.array([[0.0,        1.10714872],
                  [1.10714872, 2.03444394],
                  [2.03444394, 3.14159265]]),
    (MultipoleFieldLines, 3, (0, π + 0.1)):
        np.array([[0.0,        1.10714872],
                  [1.10714872, 2.03444394],
                  [2.03444394, 3.14159265],
                  [3.14159265, 3.24159265]]),
    (MultipoleFieldLines, 3, (0, 2 * π - 0.1)):
        np.array([[0.0,        1.10714872],
                  [1.10714872, 2.03444394],
                  [2.03444394, 3.14159265],
                  [3.14159265, 4.24874137],
                  [4.24874137, 5.17603659],
                  [5.17603659, 6.18318531]]),
    (MultipoleFieldLines, 3, (0, 2 * π)):
        np.array([[0.0,        1.10714872],
                  [1.10714872, 2.03444394],
                  [2.03444394, 3.14159265],
                  [3.14159265, 4.24874137],
                  [4.24874137, 5.17603659],
                  [5.17603659, 6.28318531]]),
    (MultipoleFieldLines, 3, (0, 2 * π + 0.1)):
        np.array([[0.0,        1.10714872],
                  [1.10714872, 2.03444394],
                  [2.03444394, 3.14159265],
                  [3.14159265, 4.24874137],
                  [4.24874137, 5.17603659],
                  [5.17603659, 6.28318531],
                  [6.28318531, 6.38318531]]),

    (MultipoleFieldLines, 4, (0, π - 0.1)):
        np.array([[0.0,        0.85707195],
                  [0.85707195, 1.57079633],
                  [1.57079633, 2.28452071],
                  [2.28452071, 3.04159265]]),
    (MultipoleFieldLines, 4, (0, π)):
        np.array([[0.0,        0.85707195],
                  [0.85707195, 1.57079633],
                  [1.57079633, 2.28452071],
                  [2.28452071, 3.14159265]]),
    (MultipoleFieldLines, 4, (0, π + 0.1)):
        np.array([[0.0,        0.85707195],
                  [0.85707195, 1.57079633],
                  [1.57079633, 2.28452071],
                  [2.28452071, 3.14159265],
                  [3.14159265, 3.24159265]]),
    (MultipoleFieldLines, 4, (0, 2 * π - 0.1)):
        np.array([[0.0,        0.85707195],
                  [0.85707195, 1.57079633],
                  [1.57079633, 2.28452071],
                  [2.28452071, 3.14159265],
                  [3.14159265, 3.9986646],
                  [3.9986646,  4.71238898],
                  [4.71238898, 5.42611336],
                  [5.42611336, 6.18318531]]),
    (MultipoleFieldLines, 4, (0, 2 * π)):
        np.array([[0.0,        0.85707195],
                  [0.85707195, 1.57079633],
                  [1.57079633, 2.28452071],
                  [2.28452071, 3.14159265],
                  [3.14159265, 3.9986646],
                  [3.9986646,  4.71238898],
                  [4.71238898, 5.42611336],
                  [5.42611336, 6.28318531]]),
    (MultipoleFieldLines, 4, (0, 2 * π + 0.1)):
        np.array([[0.0,        0.85707195],
                  [0.85707195, 1.57079633],
                  [1.57079633, 2.28452071],
                  [2.28452071, 3.14159265],
                  [3.14159265, 3.9986646],
                  [3.9986646,  4.71238898],
                  [4.71238898, 5.42611336],
                  [5.42611336, 6.28318531],
                  [6.28318531, 6.38318531]]),

    (MultipoleFieldLines, 5, (0, π - 0.1)):
        np.array([[0.0,        0.69966909],
                  [0.69966909, 1.28154836],
                  [1.28154836, 1.8600443],
                  [1.8600443,  2.44192356],
                  [2.44192356, 3.04159265]]),
    (MultipoleFieldLines, 5, (0, π)):
        np.array([[0.0,        0.69966909],
                  [0.69966909, 1.28154836],
                  [1.28154836, 1.8600443],
                  [1.8600443,  2.44192356],
                  [2.44192356, 3.14159265]]),
    (MultipoleFieldLines, 5, (0, π + 0.1)):
        np.array([[0.0,        0.69966909],
                  [0.69966909, 1.28154836],
                  [1.28154836, 1.8600443],
                  [1.8600443,  2.44192356],
                  [2.44192356, 3.14159265],
                  [3.14159265, 3.24159265]]),
    (MultipoleFieldLines, 5, (0, 2 * π - 0.1)):
        np.array([[0.0,        0.69966909],
                  [0.69966909, 1.28154836],
                  [1.28154836, 1.8600443],
                  [1.8600443,  2.44192356],
                  [2.44192356, 3.14159265],
                  [3.14159265, 3.84126174],
                  [3.84126174, 4.42314101],
                  [4.42314101, 5.00163695],
                  [5.00163695, 5.58351622],
                  [5.58351622, 6.18318531]]),
    (MultipoleFieldLines, 5, (0, 2 * π)):
        np.array([[0.0,        0.69966909],
                  [0.69966909, 1.28154836],
                  [1.28154836, 1.8600443],
                  [1.8600443,  2.44192356],
                  [2.44192356, 3.14159265],
                  [3.14159265, 3.84126174],
                  [3.84126174, 4.42314101],
                  [4.42314101, 5.00163695],
                  [5.00163695, 5.58351622],
                  [5.58351622, 6.28318531]]),
    (MultipoleFieldLines, 5, (0, 2 * π + 0.1)):
        np.array([[0.0,        0.69966909],
                  [0.69966909, 1.28154836],
                  [1.28154836, 1.8600443],
                  [1.8600443,  2.44192356],
                  [2.44192356, 3.14159265],
                  [3.14159265, 3.84126174],
                  [3.84126174, 4.42314101],
                  [4.42314101, 5.00163695],
                  [5.00163695, 5.58351622],
                  [5.58351622, 6.28318531],
                  [6.28318531, 6.38318531]]),

    (MultipoleFieldLines, 6, (0, π - 0.1)):
        np.array([[0.0,        0.5912871],
                  [0.5912871,  1.08280933],
                  [1.08280933, 1.57079633],
                  [1.57079633, 2.05878332],
                  [2.05878332, 2.55030555],
                  [2.55030555, 3.04159265]]),
    (MultipoleFieldLines, 6, (0, π)):
        np.array([[0.0,        0.5912871],
                  [0.5912871,  1.08280933],
                  [1.08280933, 1.57079633],
                  [1.57079633, 2.05878332],
                  [2.05878332, 2.55030555],
                  [2.55030555, 3.14159265]]),
    (MultipoleFieldLines, 6, (0, π + 0.1)):
        np.array([[0.0,        0.5912871],
                  [0.5912871,  1.08280933],
                  [1.08280933, 1.57079633],
                  [1.57079633, 2.05878332],
                  [2.05878332, 2.55030555],
                  [2.55030555, 3.14159265],
                  [3.14159265, 3.24159265]]),

    (MultipoleFieldLines, 7, (0, π - 0.1)):
        np.array([[0.0,        0.5120536],
                  [0.5120536,  0.93763012],
                  [0.93763012, 1.35993808],
                  [1.35993808, 1.78165458],
                  [1.78165458, 2.20396253],
                  [2.20396253, 2.62953906],
                  [2.62953906, 3.04159265]]),
    (MultipoleFieldLines, 7, (0, π)):
        np.array([[0.0,        0.5120536],
                  [0.5120536,  0.93763012],
                  [0.93763012, 1.35993808],
                  [1.35993808, 1.78165458],
                  [1.78165458, 2.20396253],
                  [2.20396253, 2.62953906],
                  [2.62953906, 3.14159265]]),
    (MultipoleFieldLines, 7, (0, π + 0.1)):
        np.array([[0.0,        0.5120536],
                  [0.5120536,  0.93763012],
                  [0.93763012, 1.35993808],
                  [1.35993808, 1.78165458],
                  [1.78165458, 2.20396253],
                  [2.20396253, 2.62953906],
                  [2.62953906, 3.14159265],
                  [3.14159265, 3.24159265]])

    # ------------------------------------------------------------------------ #
})
def test_split_interval(kls, degree, interval, expected):
    fieldlines = kls(degree, **_INIT_PARAMS.get(kls, {}))
    intervals, _ = fieldlines.split_interval_by_loop(interval)
    assert np.allclose(intervals, expected)


@expected({
    # ------------------------------------------------------------------------ #
    # dipole
    # ------------------------------------------------------------------------ #
    (PhysicalMultipoleFieldLines, 1, (0, π - 0.1)):
        np.array([[0.52359878, 2.61799388]]),
    (PhysicalMultipoleFieldLines, 1, (0, π)):
        np.array([[0.52359878, 2.61799388]]),
    (PhysicalMultipoleFieldLines, 1, (0, π + 0.1)):
        np.array([[0.52359878, 2.61799388]]),

    (PhysicalMultipoleFieldLines, 1, (0.6, π - 0.6,)):
        np.array([[0.6,        2.54159265]]),
    (PhysicalMultipoleFieldLines, 1, (0.6, π)):
        np.array([[0.6,        2.61799388]]),
    (PhysicalMultipoleFieldLines, 1, (0.6, π + 0.6,)):
        np.array([[0.6,        2.61799388],
                  [3.66519143, 3.74159265]]),

    (PhysicalMultipoleFieldLines, 1, (0, 2 * π - 0.1)):
        np.array([[0.52359878, 2.61799388],
                  [3.66519143, 5.75958653]]),
    (PhysicalMultipoleFieldLines, 1, (0, 2 * π)):
        np.array([[0.52359878, 2.61799388],
                  [3.66519143, 5.75958653]]),
    (PhysicalMultipoleFieldLines, 1, (0, 2 * π + 0.1)):
        np.array([[0.52359878, 2.61799388],
                  [3.66519143, 5.75958653]]),

    (PhysicalMultipoleFieldLines, 1, (0.6, π - 0.6)):
        np.array([[0.6,        2.54159265]]),
    (PhysicalMultipoleFieldLines, 1, (0.6, π)):
        np.array([[0.6,        2.61799388]]),
    (PhysicalMultipoleFieldLines, 1, (0.6, π + 0.6)):
        np.array([[0.6,        2.61799388],
                  [3.66519143, 3.74159265]]),

    (PhysicalMultipoleFieldLines, 1, (0.6, 2 * π - 0.6)):
        np.array([[0.6, 2.61799388],
                  [3.66519143, 5.68318531]]),
    (PhysicalMultipoleFieldLines, 1, (0.6, 2 * π)):
        np.array([[0.6,        2.61799388],
                  [3.66519143, 5.75958653]]),
    (PhysicalMultipoleFieldLines, 1, (0.6, 2 * π + 0.6)):
        np.array([[0.6, 2.61799388],
                  [3.66519143, 5.75958653],
                  [6.80678408, 6.88318531]]),

    # ------------------------------------------------------------------------ #
    # quadrupole
    # ------------------------------------------------------------------------ #
    (PhysicalMultipoleFieldLines, 2, (0, π - 0.1)):
        np.array([[0.19294107, 1.5346569],
                  [1.60693575, 2.94865158]]),
    (PhysicalMultipoleFieldLines, 2, (0, π)):
        np.array([[0.19294107, 1.5346569],
                  [1.60693575, 2.94865158]]),
    (PhysicalMultipoleFieldLines, 2, (0, π + 0.1)):
        np.array([[0.19294107, 1.5346569],
                  [1.60693575, 2.94865158]]),
    (PhysicalMultipoleFieldLines, 2, (0, 2 * π - 0.1)):
        np.array([[0.19294107, 1.5346569],
                  [1.60693575, 2.94865158],
                  [3.33453373, 4.67624955],
                  [4.74852841, 6.09024423]]),
    (PhysicalMultipoleFieldLines, 2, (0, 2 * π)):
        np.array([[0.19294107, 1.5346569],
                  [1.60693575, 2.94865158],
                  [3.33453373, 4.67624955],
                  [4.74852841, 6.09024423]]),
    (PhysicalMultipoleFieldLines, 2, (0, 2 * π + 0.1)):
        np.array([[0.19294107, 1.5346569],
                  [1.60693575, 2.94865158],
                  [3.33453373, 4.67624955],
                  [4.74852841, 6.09024423]]),

    (PhysicalMultipoleFieldLines, 2, (0.6, π - 0.6)):
        np.array([[0.6, 1.5346569],
                  [1.60693575, 2.54159265]]),
    (PhysicalMultipoleFieldLines, 2, (0.6, π)):
        np.array([[0.6, 1.5346569],
                  [1.60693575, 2.94865158]]),
    (PhysicalMultipoleFieldLines, 2, (0.6, π + 0.6)):
        np.array([[0.6, 1.5346569],
                  [1.60693575, 2.94865158],
                  [3.33453373, 3.74159265]]),

    (PhysicalMultipoleFieldLines, 2, (0.6, 2 * π - 0.6)):
        np.array([[0.6, 1.5346569],
                   [1.60693575, 2.94865158],
                   [3.33453373, 4.67624955],
                   [4.74852841, 5.68318531]]),
    (PhysicalMultipoleFieldLines, 2, (0.6, 2 * π)):
        np.array([[0.6, 1.5346569],
                  [1.60693575, 2.94865158],
                  [3.33453373, 4.67624955],
                  [4.74852841, 6.09024423]]),
    (PhysicalMultipoleFieldLines, 2, (0.6, 2 * π + 0.6)):
        np.array([[0.6, 1.5346569],
                  [1.60693575, 2.94865158],
                  [3.33453373, 4.67624955],
                  [4.74852841, 6.09024423],
                  [6.47612638, 6.88318530]]),
    # ------------------------------------------------------------------------ #
    # sextupole
    # ------------------------------------------------------------------------ #
    # (PhysicalMultipoleFieldLines, 3, (0, π - 0.1)):
    #     np.array([[0.0,        1.10714872],
    #               [1.10714872, 2.03444394],
    #               [2.03444394, 3.04159265]]),
    # (PhysicalMultipoleFieldLines, 3, (0, π)):
    #     np.array([[0.0,        1.10714872],
    #               [1.10714872, 2.03444394],
    #               [2.03444394, 3.14159265]]),
    # (PhysicalMultipoleFieldLines, 3, (0, π + 0.1)):
    #     np.array([[0.0,        1.10714872],
    #               [1.10714872, 2.03444394],
    #               [2.03444394, 3.14159265],
    #               [3.14159265, 3.24159265]]),
    # (PhysicalMultipoleFieldLines, 3, (0, 2 * π - 0.1)):
    #     np.array([[0.0,        1.10714872],
    #               [1.10714872, 2.03444394],
    #               [2.03444394, 3.14159265],
    #               [3.14159265, 4.24874137],
    #               [4.24874137, 5.17603659],
    #               [5.17603659, 6.18318531]]),
    # (PhysicalMultipoleFieldLines, 3, (0, 2 * π)):
    #     np.array([[0.0,        1.10714872],
    #               [1.10714872, 2.03444394],
    #               [2.03444394, 3.14159265],
    #               [3.14159265, 4.24874137],
    #               [4.24874137, 5.17603659],
    #               [5.17603659, 6.28318531]]),
    # (PhysicalMultipoleFieldLines, 3, (0, 2 * π + 0.1)):
    #     np.array([[0.0,        1.10714872],
    #               [1.10714872, 2.03444394],
    #               [2.03444394, 3.14159265],
    #               [3.14159265, 4.24874137],
    #               [4.24874137, 5.17603659],
    #               [5.17603659, 6.28318531],
    #               [6.28318531, 6.38318531]]),

    # ------------------------------------------------------------------------ #
    # octupole
    # ------------------------------------------------------------------------ #
    # (PhysicalMultipoleFieldLines, 4, (0, π - 0.1)):
    #     np.array([[0.0,        0.85707195],
    #               [0.85707195, 1.57079633],
    #               [1.57079633, 2.28452071],
    #               [2.28452071, 3.04159265]]),
    # (PhysicalMultipoleFieldLines, 4, (0, π)):
    #     np.array([[0.0,        0.85707195],
    #               [0.85707195, 1.57079633],
    #               [1.57079633, 2.28452071],
    #               [2.28452071, 3.14159265]]),
    # (PhysicalMultipoleFieldLines, 4, (0, π + 0.1)):
    #     np.array([[0.0,        0.85707195],
    #               [0.85707195, 1.57079633],
    #               [1.57079633, 2.28452071],
    #               [2.28452071, 3.14159265],
    #               [3.14159265, 3.24159265]]),
    # (PhysicalMultipoleFieldLines, 4, (0, 2 * π - 0.1)):
    #     np.array([[0.0,        0.85707195],
    #               [0.85707195, 1.57079633],
    #               [1.57079633, 2.28452071],
    #               [2.28452071, 3.14159265],
    #               [3.14159265, 3.9986646],
    #               [3.9986646,  4.71238898],
    #               [4.71238898, 5.42611336],
    #               [5.42611336, 6.18318531]]),
    # (PhysicalMultipoleFieldLines, 4, (0, 2 * π)):
    #     np.array([[0.0,        0.85707195],
    #               [0.85707195, 1.57079633],
    #               [1.57079633, 2.28452071],
    #               [2.28452071, 3.14159265],
    #               [3.14159265, 3.9986646],
    #               [3.9986646,  4.71238898],
    #               [4.71238898, 5.42611336],
    #               [5.42611336, 6.28318531]]),
    # (PhysicalMultipoleFieldLines, 4, (0, 2 * π + 0.1)):
    #     np.array([[0.0,        0.85707195],
    #               [0.85707195, 1.57079633],
    #               [1.57079633, 2.28452071],
    #               [2.28452071, 3.14159265],
    #               [3.14159265, 3.9986646],
    #               [3.9986646,  4.71238898],
    #               [4.71238898, 5.42611336],
    #               [5.42611336, 6.28318531],
    #               [6.28318531, 6.38318531]]),

    # ------------------------------------------------------------------------ #
    # decapole
    # ------------------------------------------------------------------------ #
    # (PhysicalMultipoleFieldLines, 5, (0, π - 0.1)):
    #     np.array([[0.0,        0.69966909],
    #               [0.69966909, 1.28154836],
    #               [1.28154836, 1.8600443],
    #               [1.8600443,  2.44192356],
    #               [2.44192356, 3.04159265]]),
    # (PhysicalMultipoleFieldLines, 5, (0, π)):
    #     np.array([[0.0,        0.69966909],
    #               [0.69966909, 1.28154836],
    #               [1.28154836, 1.8600443],
    #               [1.8600443,  2.44192356],
    #               [2.44192356, 3.14159265]]),
    # (PhysicalMultipoleFieldLines, 5, (0, π + 0.1)):
    #     np.array([[0.0,        0.69966909],
    #               [0.69966909, 1.28154836],
    #               [1.28154836, 1.8600443],
    #               [1.8600443,  2.44192356],
    #               [2.44192356, 3.14159265],
    #               [3.14159265, 3.24159265]]),
    # (PhysicalMultipoleFieldLines, 5, (0, 2 * π - 0.1)):
    #     np.array([[0.0,        0.69966909],
    #               [0.69966909, 1.28154836],
    #               [1.28154836, 1.8600443],
    #               [1.8600443,  2.44192356],
    #               [2.44192356, 3.14159265],
    #               [3.14159265, 3.84126174],
    #               [3.84126174, 4.42314101],
    #               [4.42314101, 5.00163695],
    #               [5.00163695, 5.58351622],
    #               [5.58351622, 6.18318531]]),
    # (PhysicalMultipoleFieldLines, 5, (0, 2 * π)):
    #     np.array([[0.0,        0.69966909],
    #               [0.69966909, 1.28154836],
    #               [1.28154836, 1.8600443],
    #               [1.8600443,  2.44192356],
    #               [2.44192356, 3.14159265],
    #               [3.14159265, 3.84126174],
    #               [3.84126174, 4.42314101],
    #               [4.42314101, 5.00163695],
    #               [5.00163695, 5.58351622],
    #               [5.58351622, 6.28318531]]),
    # (PhysicalMultipoleFieldLines, 5, (0, 2 * π + 0.1)):
    #     np.array([[0.0,        0.69966909],
    #               [0.69966909, 1.28154836],
    #               [1.28154836, 1.8600443],
    #               [1.8600443,  2.44192356],
    #               [2.44192356, 3.14159265],
    #               [3.14159265, 3.84126174],
    #               [3.84126174, 4.42314101],
    #               [4.42314101, 5.00163695],
    #               [5.00163695, 5.58351622],
    #               [5.58351622, 6.28318531],
    #               [6.28318531, 6.38318531]]),

    # ------------------------------------------------------------------------ #
    # dodecapole
    # ------------------------------------------------------------------------ #
    # (PhysicalMultipoleFieldLines, 6, (0, π - 0.1)):
    #     np.array([[0.0,        0.5912871],
    #               [0.5912871,  1.08280933],
    #               [1.08280933, 1.57079633],
    #               [1.57079633, 2.05878332],
    #               [2.05878332, 2.55030555],
    #               [2.55030555, 3.04159265]]),
    # (PhysicalMultipoleFieldLines, 6, (0, π)):
    #     np.array([[0.0,        0.5912871],
    #               [0.5912871,  1.08280933],
    #               [1.08280933, 1.57079633],
    #               [1.57079633, 2.05878332],
    #               [2.05878332, 2.55030555],
    #               [2.55030555, 3.14159265]]),
    # (PhysicalMultipoleFieldLines, 6, (0, π + 0.1)):
    #     np.array([[0.0,        0.5912871],
    #               [0.5912871,  1.08280933],
    #               [1.08280933, 1.57079633],
    #               [1.57079633, 2.05878332],
    #               [2.05878332, 2.55030555],
    #               [2.55030555, 3.14159265],
    #               [3.14159265, 3.24159265]]),

    # ------------------------------------------------------------------------ #
    # quadecapole
    # ------------------------------------------------------------------------ #
    # (PhysicalMultipoleFieldLines, 7, (0, π - 0.1)):
    #     np.array([[0.0,        0.5120536],
    #               [0.5120536,  0.93763012],
    #               [0.93763012, 1.35993808],
    #               [1.35993808, 1.78165458],
    #               [1.78165458, 2.20396253],
    #               [2.20396253, 2.62953906],
    #               [2.62953906, 3.04159265]]),
    # (PhysicalMultipoleFieldLines, 7, (0, π)):
    #     np.array([[0.0,        0.5120536],
    #               [0.5120536,  0.93763012],
    #               [0.93763012, 1.35993808],
    #               [1.35993808, 1.78165458],
    #               [1.78165458, 2.20396253],
    #               [2.20396253, 2.62953906],
    #               [2.62953906, 3.14159265]]),
    # (PhysicalMultipoleFieldLines, 7, (0, π + 0.1)):
    #     np.array([[0.0,        0.5120536],
    #               [0.5120536,  0.93763012],
    #               [0.93763012, 1.35993808],
    #               [1.35993808, 1.78165458],
    #               [1.78165458, 2.20396253],
    #               [2.20396253, 2.62953906],
    #               [2.62953906, 3.14159265],
    #               [3.14159265, 3.24159265]])
})
def test_split_interval2(kls, degree, interval, expected):
    fieldlines = kls(degree, **_INIT_PARAMS.get(kls, {}))
    _, intervals = fieldlines.split_interval_by_loop(interval)
    assert np.allclose(intervals, expected)


_SHELLS = np.arange(1, 5)
_INIT_PARAMS = {
    PhysicalMultipoleFieldLines: {'radius': 0.25},
    PhysicalMultipole: {'radius': 0.25},
}


@pytest.mark.parametrize('degree', range(1, 8))
@pytest.mark.parametrize('kls', [MultipoleFieldLines,
                                 PhysicalMultipoleFieldLines,
                                 IdealMultipole,
                                 PhysicalMultipole])
@pytest.mark.mpl_image_compare(baseline_dir='data/images',
                               remove_text=True,
                               hash_library='tests/data/test_image_hashes.json')
def test_plot2d(kls, degree):

    art = kls(degree, **_INIT_PARAMS.get(kls, {})).plot2d(rshells=_SHELLS)

    if isinstance(art, tuple):
        art = art[0]

    return art.axes.figure

# @pytest.mark.parametrize('degree', range(1, 8))
# @pytest.mark.mpl_image_compare(baseline_dir='data/images')
# def test_plot2d(self, degree):

#     rshells = np.arange(1, 5)
#     line = MultipoleFieldLines(degree).plot2d(rshells=rshells)
